1. ein/bank/address
2. analytics
3. email api
4. login
5. dasboard ui
6. dashboard features
7. payment
8. bing ads

profilytic-backend/
│
├── src/
│   ├── api/
│   │   ├── resumeController.ts         # Handlers for uploading and managing resumes
│   │   ├── jobController.ts            # Handlers for job descriptions and operations
│   │   ├── userController.ts           # Handlers for user authentication and management
│   │   ├── metricsController.ts        # API endpoints for fetching and displaying metrics
│   │   ├── companyController.ts        # Handlers for company-specific operations
│   │   ├── dashboardController.ts      # API endpoints to aggregate and provide dashboard data
│   │   ├── paymentController.ts        # API endpoints for handling payments and token purchases
│   │   ├── tokenController.ts          # API endpoints for token management and validation
│   │   └── pricingController.ts        # API endpoints to provide and update pricing information
│   │
│   ├── interfaces/
│   │   ├── IAuthService.ts             # Interface for authentication services
│   │   ├── IEmailService.ts            # Interface for email operations
│   │   ├── IPaymentService.ts          # Interface for payment gateways
│   │   ├── IStorageService.ts          # Interface for storage services
│   │   ├── IProcessingService.ts       # Interface for text processing services
│   │   ├── ILoggerService.ts           # Interface for logging and monitoring solutions
│   │
│   ├── validation/
│   │   ├── resumeValidation.ts         # Validation rules for resume data
│   │   ├── jobValidation.ts            # Validation rules for job postings
│   │   ├── userValidation.ts           # Validation rules for user data
│   │   ├── companyValidation.ts        # Validation rules for company data
│   │
│   ├── middleware/
│   │   ├── authMiddleware.ts           # Authentication middleware
│   │   ├── errorHandlingMiddleware.ts  # Centralized error handling middleware
│   │   ├── loggingMiddleware.ts        # Request logging middleware
│   │   └── tokenValidationMiddleware.ts# Middleware to check token balances
│   │
│   ├── services/
│   │   ├── authService.ts              # Authentication services
│   │   ├── emailService.ts             # Email services
│   │   ├── resumeProcessingService.ts  # Services for resume file operations and segment analysis
│   │   ├── metricsService.ts           # Services to calculate and manage various metrics
│   │   ├── storageService.ts           # Implementation for DigitalOcean Spaces storage service
│   │   ├── processingService.ts        # Implementation for OpenAI processing service
│   │   ├── companyService.ts           # Services for handling company-specific data
│   │   ├── dashboardService.ts         # Services to fetch and manage dashboard data
│   │   ├── paymentService.ts           # Services to manage interactions with payment gateways
│   │   ├── tokenService.ts             # Services to manage token distribution and usage
│   │   ├── pricingService.ts           # Services to manage pricing based on external data
│   │
│   ├── workflows/
│   │   ├── processResumeWorkflow.ts    # Temporal workflow to orchestrate resume processing
│   │   ├── metricsWorkflow.ts          # Temporal workflows for processing resume metrics
│   │   ├── emailCampaignWorkflow.ts    # Temporal workflow for automated email campaigns
│   │   ├── updatePricingWorkflow.ts    # Temporal workflow to update token prices based on gold prices
│   │   └── activities/
│   │       ├── uploadToSpaces.ts       # Upload resumes to DigitalOcean Spaces
│   │       ├── extractSegments.ts      # Extract segments from a resume
│   │       ├── processSegment.ts       # Process each resume segment with OpenAI
│   │       ├── analyzeMetric.ts        # Activities to handle each metric analysis via OpenAI
│   │       └── storeResults.ts         # Store processing results in MongoDB
│   │
│   ├── models/
│   │   ├── userModel.ts                # Model for user data
│   │   ├── resumeModel.ts              # Model for resume data including metrics fields
│   │   ├── jobModel.ts                 # Model for job data
│   │   ├── metricsModel.ts             # Model for storing and retrieving metrics data
│   │   ├── companyModel.ts             # Model for company data
│   │   ├── dashboardModel.ts           # Model for storing dashboard configurations
│   │   ├── paymentModel.ts             # Model for storing payment transaction details
│   │   ├── tokenModel.ts               # Model for managing user tokens
│   │   ├── pricingModel.ts             # Model for tracking current token pricing
│   │
│   ├── utils/
│   │   ├── logger.ts                   # Logging utility
│   │   ├── errorHandler.ts             # Centralized error handling
│   │   └── websocketManager.ts         # Manage WebSocket connections for real-time updates
│   │
│   ├── templates/
│   │   ├── email/
│   │   │   ├── welcomeEmail.html
│   │   │   ├── passwordResetEmail.html
│   │   │   ├── notificationEmail.html
│   │   │   └── ...
│   │
│   └── app.ts                          # Main application setup and server initialization
│
└── config/
    └── environment.ts                  # Environment-specific configuration


